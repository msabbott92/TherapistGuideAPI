// <auto-generated />
using IFSPartsMapAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IFSPartsMapAPI.Migrations
{
    [DbContext(typeof(IFSPartsMapDbContext))]
    [Migration("20240110194043_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IFSPartsMapAPI.Models.IFSPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartCategoryId");

                    b.HasIndex("PatientId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("IFSPartsMapAPI.Models.PartCategory", b =>
                {
                    b.Property<int>("PartCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartCategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartCategoryId");

                    b.ToTable("PartCategories");
                });

            modelBuilder.Entity("IFSPartsMapAPI.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentGoals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("IFSPartsMapAPI.Models.QuestionResponse", b =>
                {
                    b.Property<int>("QuestionResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionResponseId"), 1L, 1);

                    b.Property<int>("IFSPartId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionResponseId");

                    b.HasIndex("IFSPartId");

                    b.ToTable("QuestionResponses");
                });

            modelBuilder.Entity("IFSPartsMapAPI.Models.IFSPart", b =>
                {
                    b.HasOne("IFSPartsMapAPI.Models.PartCategory", "PartCategory")
                        .WithMany()
                        .HasForeignKey("PartCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IFSPartsMapAPI.Models.Patient", null)
                        .WithMany("IFSParts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartCategory");
                });

            modelBuilder.Entity("IFSPartsMapAPI.Models.QuestionResponse", b =>
                {
                    b.HasOne("IFSPartsMapAPI.Models.IFSPart", null)
                        .WithMany("QuestionResponses")
                        .HasForeignKey("IFSPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IFSPartsMapAPI.Models.IFSPart", b =>
                {
                    b.Navigation("QuestionResponses");
                });

            modelBuilder.Entity("IFSPartsMapAPI.Models.Patient", b =>
                {
                    b.Navigation("IFSParts");
                });
#pragma warning restore 612, 618
        }
    }
}
